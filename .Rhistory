helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
br(),
wellPanel(
h3("Save"),
actionButton("save", "Save table")
)
),
mainPanel(
rHandsontableOutput("hot")
)
)
),
tabPanel("Plot the data",
sidebarLayout( # give us a nice data selection side bar!
sidebarPanel(
h2("Try a histogram out for size"), # Some nice welcoming text for users
br(), br(),
selectInput("chosen.value",  "Choose a value to plot", choices = names(DF), selected = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)))
server <- shinyServer(function(input, output, session){
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
#      rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
#  })
rhandsontable(DF,  stretchH = "all")
})
## Save
observeEvent(input$save, {
finalDF <- isolate(values[["DF"]])
saveRDS(finalDF, file=file.path(outdir, "table.rds"))
})
##get data ready to plot
dataSelection <- reactive({
dat = readRDS("table.rds")
chosen.data <- dat[,input$chosen.value] # The user's selection from the drop-down
})
#
output$histogram = renderPlot({
chosen.data <- dataSelection()
if(class(chosen.data)=="numeric"){
hist(chosen.data, breaks=20)}
else{
plot(1:2, 1:2, xaxt="n", yaxt="n", type="n", box="n", xlab="", ylab="")
text(x=1.5, y=1.5, labels="The chosen data is not a numerical value", cex=2)
}
})
})
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
#ui <- fluidPage(
#      fileInput("file", h3("File Input")),
#    hr(),
#    fluidRow(column(width=8,verbatimTextOutput("value"))),
#   )
#default_data=read.csv("domdat.2010.csv")
DF=iris
outfilename="table.csv"
ui <- shinyUI(navbarPage("Walking Through Stats",
tabPanel("Enter the data",
sidebarLayout(
sidebarPanel(
helpText("Shiny app based on an example given in the rhandsontable package.",
"Right-click on the table to delete/insert rows.",
"Double-click on a cell to edit"),
br(),
wellPanel(
h3("Save"),
actionButton("save", "Save table")
)
),
mainPanel(
rHandsontableOutput("hot")
)
)
),
tabPanel("Plot the data",
sidebarLayout( # give us a nice data selection side bar!
sidebarPanel(
h2("Try a histogram out for size"), # Some nice welcoming text for users
br(), br(),
selectInput("chosen.value",  "Choose a value to plot", choices = names(DF), selected = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)))
server <- shinyServer(function(input, output, session){
values <- reactiveValues()
## Handsontable
observe({
if (!is.null(input$hot)) {
DF = hot_to_r(input$hot)
} else {
if (is.null(values[["DF"]]))
DF <- DF
else
DF <- values[["DF"]]
}
values[["DF"]] <- DF
})
output$hot <- renderRHandsontable({
DF <- values[["DF"]]
if (!is.null(DF))
#      rhandsontable(DF, useTypes = as.logical(input$useType), stretchH = "all")
#  })
rhandsontable(DF,  stretchH = "all")
})
## Save
observeEvent(input$save, {
finalDF <- isolate(values[["DF"]])
saveRDS(finalDF, file=file.path(outdir, "table.rds"))
})
##get data ready to plot
dataSelection <- reactive({
dat = readRDS("table.rds")
chosen.data <- dat[,input$chosen.value] # The user's selection from the drop-down
})
#
output$histogram = renderPlot({
chosen.data <- dataSelection()
if(class(chosen.data)=="numeric"){
hist(chosen.data, breaks=20)}
else{
plot(1:2, 1:2, xaxt="n", yaxt="n", type="n", bty="n", xlab="", ylab="")
text(x=1.5, y=1.5, labels="The chosen data is not a numerical value", cex=2)
}
})
})
shinyApp(ui = ui, server = server)
runApp('Stats_w_Shiny')
runApp('Stats_w_Shiny')
runApp('Stats_w_Shiny')
runApp('Stats_w_Shiny')
runApp()
runApp('Stats_w_Shiny')
runApp('Stats_w_Shiny')
?downloadHandler
runApp('Stats_w_Shiny')
?grid.arrange
library(tidyverse)
library(ggplot2)
?grid.arrange
runApp('Stats_w_Shiny')
runApp('Stats_w_Shiny')
runApp('Stats_w_Shiny')
runApp('Stats_w_Shiny')
strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S")
runApp('Stats_w_Shiny')
shiny::runApp()
runApp()
library(ggplot2)
iris
p = ggplot(iris, aes(x=species, y=Sepal.Width))
names(iris)
p = ggplot(iris, aes(x=Species, y=Sepal.Width)) %>% geom_histogram()
p = ggplot(iris, aes(x=Species, y=Sepal.Width)) + geom_histogram()
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram()
p
?geom_histogram
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram() + theme_classic()
p
cowplot(p)
library(cowplot)
cowplot(p)
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram() + theme_cowplot()
p
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram()
p
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram(fill=lightgray)
p
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram(fill="red")
p
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram(fill="red", color="black")
p
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram(fill="gray", color="black")
p
p = ggplot(iris, aes(x=Sepal.Width)) + geom_histogram(fill="gray", color="black") + theme_classic()
p
runApp()
runApp()
chosen.data <- iris %>% select(Sepal.Length)
chosen.data
class(chosen.data)
names(chosen.data)
names(chosen.data)[1]
runApp()
chosen.data
ggplot(chosen.data, aes(x=names(chosen.data)[1])) + geom_histogram(fill="gray", color="black") + theme_classic()
ggplot(chosen.data, aes(x=1)) + geom_histogram(fill="gray", color="black") + theme_classic()
ggplot(chosen.data, aes(x=chosen.data[,1])) + geom_histogram(fill="gray", color="black") + theme_classic()
runApp()
View(chosen.data)
cd <- iris %>% select(Sepal.Length)
cd
ggplot(cd, aes(x=cd[,1])) + geom_histogram(fill="gray", color="black") + theme_classic()
runApp()
runApp()
cd
names(cd)
cd$names(cd)[1]
names(cd[1])
ggplot(cd, aes(x=cd[,1])) + geom_histogram(fill="gray", color="black") + theme_classic()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cd <- iris %>% select(Sepal.Length)
cd
ggplot(cd) + geom_histogram(fill="gray", color="black") + theme_classic()
ggplot(cd, aes(cd[,1])) + geom_histogram(fill="gray", color="black") + theme_classic()
runApp()
runApp()
dev.off()
runApp()
install.packages("patchwork")
runApp()
?downloadHandler
?pdf
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p =ggplot(cd, aes(cd[,1])) + geom_histogram(fill="gray", color="black") + theme_classic()
library(gridExtra)
grid.arrange(p)
runApp()
paste("stats_graphs_", strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S"), ".pdf", sep = "")
runApp()
runApp()
strftime
?strftime
paste("stats_graphs_", strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S"), ".pdf", sep = "")
runApp()
runApp()
?pdf
runApp()
?downloadHandler
runApp()
runApp()
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
?renderDataTable
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
?vroom
runApp('stats_shiny_v3')
table <- readRDS("~/Documents/GitHub/Stats_Shiny/stats_shiny_v3/table.rds")
table
runApp('stats_shiny_v3')
?switch
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp()
runApp()
runApp('stats_shiny_v3')
runApp()
runApp('stats_shiny_v3')
?observeEvent
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
state.name
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
cd <- iris %>% select(Sepal.Length)
cd
names(iris)
name(iris)
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
?checkboxGroupInput
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
uiOutput()
?uiOutput
runApp('stats_shiny_v3')
?selectInput
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
df=read.csv("domdat.2010.csv")
df
df=read.csv("domdat.2010.csv")
df
df=read.csv("old/domdat.2010.csv")
df
str(df)
runApp('stats_shiny_v3')
tb=as.tibble(df)
tb=as.tibble(df)
tb
glimpse(tb)
is.double(tb[,3])
class(tb[,3])
is.numeric(tb[,3])
is.character(tb[,1])
is.integer(tb[,1])
str(tb)
tb$elo.normalized
class(tb$elo.normalized)
class(tb[[1]][,3])
class(tb[[3]])
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
write.csv(iris, "iris.csv")
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
?glimpse
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='dshizuka', token='B840CA5AE6A9BD6CAC438F8D20937ABF', secret='HmvhtfwIaxIm6hMe5E9TrnwBXTApQqCu5keqJ/HY')
library(rsconnect)
rsconnect::deployApp('app.R')
rsconnect::deployApp('app.R')
get(wd)
getwd()
rsconnect::deployApp('/stats_shiny_v3/app.R')
rsconnect::deployApp('stats_shiny_v3/app.R')
shiny::runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
?ggsave
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v3')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
runApp('stats_shiny_v4')
library(shiny); runApp('old/Shiny_stats_v2.R')
runApp('old')
runApp('stats_shiny_v4')
runApp('Lab1_sampling')
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
?system.file
?shinyAppDir
system.file("examples/06_tabsets", package = "shiny")
install.packages('rsconnect')
install.packages("rsconnect")
shiny::runApp('Lab1_Sampling')
system.file("examples/06_tabsets", package="shiny")
getwd()
