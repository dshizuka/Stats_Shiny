chosen.data <- dat %>% select(latency)
return(chosen.data)
})
plotit = reactive({
require(ggplot2)
require(survival)
chosen.data <- dataSelection()
sf <- survfit(Surv(latency, event)~Sex, data=chosen.data)
values$p <-  plot(survfit(Surv(latency, event)~Sex, data=chosen.data), col=c("red", "blue"), las=1, xlab = "time(minutes)", ylab = "proportion not learned")
values$p
})
#
output$KM = renderPlot({
print(plotit())
})
#
output$export <- downloadHandler(
filename <- function(){
paste("plot_", strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S"), ".pdf", sep = "")},
content = function(file){
pdf(file, onefile = T)
print(values$p)
dev.off()
}
#        contentType = 'image/pdf'
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rhandsontable)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(survival)
# Define UI for application that draws a histogram
ui <- shinyUI(navbarPage("Walking Through Stats",
tabPanel("Enter the data",
sidebarLayout(
sidebarPanel(
wellPanel(
h3("Upload data file (.csv format)"),
fileInput("upload", NULL)
),
br(),
numericInput("n", "# rows to show", value = 5, min = 1, step = 1),
br(),
),
mainPanel(
"Once you upload your data on the left, the first several rows of the data will show up as a table. Check to make sure that you've uploaded the correct table and that the variables are categorized correctly. Once it looks good, move on to the 'Plot the data' section",
tableOutput("head"),
h3(verbatimTextOutput("var.check"))
)
)
),
tabPanel("Plot the data",
sidebarLayout( # give us a nice data selection side bar!
sidebarPanel(
h4("Plot a Kaplan-Meier Curve"),
selectInput("latency",  "Choose a latency value to plot", choices = NULL),
selectInput("event",  "Choose the event column", choices = NULL),
selectInput("Sex",  "Choose the grouping (i.e., treatment) variable", choices = NULL),
br(),
downloadButton("export", label = "Download a report")
),
mainPanel(
plotOutput("KM")
)
))
))
# Define server logic required to draw a K-M plot
server <- function(input, output, session){
values <- reactiveValues()
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
csv = vroom::vroom(input$upload$datapath, delim = ","),
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .csv or .tsv file")
)
})
#this updates the drop-down menu for selecting variables to plot given the data by taking the column names of the dataframe.
observeEvent(data(),{
choices=names(data())
updateSelectInput(session, "latency", choices=choices)
updateSelectInput(session, "event", choices=choices)
updateSelectInput(session, "Sex", choices=choices)
})
output$head <-   renderTable({
head(data(), input$n)
})
#
output$var.check <- renderPrint({
sapply(as.data.frame(data()), class)
})
# ##get data ready to plot
dataSelection <- reactive({
dat <- data()
chosen.data <- dat %>% select(input$latency)
return(chosen.data)
})
plotit = reactive({
require(ggplot2)
require(survival)
chosen.data <- dataSelection()
sf <- survfit(Surv(latency, event)~Sex, data=chosen.data)
values$p <-  plot(survfit(Surv(latency, event)~Sex, data=chosen.data), col=c("red", "blue"), las=1, xlab = "time(minutes)", ylab = "proportion not learned")
values$p
})
#
output$KM = renderPlot({
print(plotit())
})
#
output$export <- downloadHandler(
filename <- function(){
paste("plot_", strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S"), ".pdf", sep = "")},
content = function(file){
pdf(file, onefile = T)
print(values$p)
dev.off()
}
#        contentType = 'image/pdf'
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rhandsontable)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(survival)
# Define UI for application that draws a histogram
ui <- shinyUI(navbarPage("Walking Through Stats",
tabPanel("Enter the data",
sidebarLayout(
sidebarPanel(
wellPanel(
h3("Upload data file (.csv format)"),
fileInput("upload", NULL)
),
br(),
numericInput("n", "# rows to show", value = 5, min = 1, step = 1),
br(),
),
mainPanel(
"Once you upload your data on the left, the first several rows of the data will show up as a table. Check to make sure that you've uploaded the correct table and that the variables are categorized correctly. Once it looks good, move on to the 'Plot the data' section",
tableOutput("head"),
h3(verbatimTextOutput("var.check"))
)
)
),
tabPanel("Plot the data",
sidebarLayout( # give us a nice data selection side bar!
sidebarPanel(
h4("Plot a Kaplan-Meier Curve"),
selectInput("latency",  "Choose a latency value to plot", choices = NULL),
selectInput("event",  "Choose the event column", choices = NULL),
selectInput("Sex",  "Choose the grouping (i.e., treatment) variable", choices = NULL),
br(),
downloadButton("export", label = "Download a report")
),
mainPanel(
plotOutput("KM")
)
))
))
# Define server logic required to draw a K-M plot
server <- function(input, output, session){
values <- reactiveValues()
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
csv = vroom::vroom(input$upload$datapath, delim = ","),
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .csv or .tsv file")
)
})
#this updates the drop-down menu for selecting variables to plot given the data by taking the column names of the dataframe.
observeEvent(data(),{
choices=names(data())
updateSelectInput(session, "latency", choices=choices)
updateSelectInput(session, "event", choices=choices)
updateSelectInput(session, "Sex", choices=choices)
})
output$head <-   renderTable({
head(data(), input$n)
})
#
output$var.check <- renderPrint({
sapply(as.data.frame(data()), class)
})
# ##get data ready to plot
dataSelection <- reactive({
dat <- data()
chosen.data <- dat %>% select(input$latency)
return(chosen.data)
})
plotit = reactive({
require(ggplot2)
require(survival)
chosen.data <- dataSelection()
sf <- survfit(Surv(latency, event)~Sex, data=chosen.data)
values$p <-  plot(survfit(Surv(latency, event)~Sex, data=chosen.data), col=c("red", "blue"), las=1, xlab = "time(minutes)", ylab = "proportion not learned")
values$p
})
#
output$KM = renderPlot({
print(plotit())
})
#
output$export <- downloadHandler(
filename <- function(){
paste("plot_", strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S"), ".pdf", sep = "")},
content = function(file){
pdf(file, onefile = T)
print(values$p)
dev.off()
}
#        contentType = 'image/pdf'
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rhandsontable)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(survival)
# Define UI for application that draws a histogram
ui <- shinyUI(navbarPage("Walking Through Stats",
tabPanel("Enter the data",
sidebarLayout(
sidebarPanel(
wellPanel(
h3("Upload data file (.csv format)"),
fileInput("upload", NULL)
),
br(),
numericInput("n", "# rows to show", value = 5, min = 1, step = 1),
br(),
),
mainPanel(
"Once you upload your data on the left, the first several rows of the data will show up as a table. Check to make sure that you've uploaded the correct table and that the variables are categorized correctly. Once it looks good, move on to the 'Plot the data' section",
tableOutput("head"),
h3(verbatimTextOutput("var.check"))
)
)
),
tabPanel("Plot the data",
sidebarLayout( # give us a nice data selection side bar!
sidebarPanel(
h4("Plot a Kaplan-Meier Curve"),
selectInput("latency",  "Choose a latency value to plot", choices = NULL),
selectInput("event",  "Choose the event column", choices = NULL),
selectInput("Sex",  "Choose the grouping (i.e., treatment) variable", choices = NULL),
br(),
downloadButton("export", label = "Download a report")
),
mainPanel(
plotOutput("KM")
)
))
))
# Define server logic required to draw a K-M plot
server <- function(input, output, session){
values <- reactiveValues()
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
csv = vroom::vroom(input$upload$datapath, delim = ","),
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .csv or .tsv file")
)
})
#this updates the drop-down menu for selecting variables to plot given the data by taking the column names of the dataframe.
observeEvent(data(),{
choices=names(data())
updateSelectInput(session, "latency", choices=choices)
updateSelectInput(session, "event", choices=choices)
updateSelectInput(session, "Sex", choices=choices)
})
output$head <-   renderTable({
head(data(), input$n)
})
#
output$var.check <- renderPrint({
sapply(as.data.frame(data()), class)
})
# ##get data ready to plot
dataSelection <- reactive({
dat <- data()
chosen.data <- dat %>% select(input$latency, input$event, input$Sex)
return(chosen.data)
})
plotit = reactive({
require(ggplot2)
require(survival)
chosen.data <- dataSelection()
sf <- survfit(Surv(latency, event)~Sex, data=chosen.data)
values$p <-  plot(survfit(Surv(latency, event)~Sex, data=chosen.data), col=c("red", "blue"), las=1, xlab = "time(minutes)", ylab = "proportion not learned")
values$p
})
#
output$KM = renderPlot({
print(plotit())
})
#
output$export <- downloadHandler(
filename <- function(){
paste("plot_", strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S"), ".pdf", sep = "")},
content = function(file){
pdf(file, onefile = T)
print(values$p)
dev.off()
}
#        contentType = 'image/pdf'
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(rhandsontable)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(survival)
# Define UI for application that draws a histogram
ui <- shinyUI(navbarPage("Walking Through Stats",
tabPanel("Enter the data",
sidebarLayout(
sidebarPanel(
wellPanel(
h3("Upload data file (.csv format)"),
fileInput("upload", NULL)
),
br(),
numericInput("n", "# rows to show", value = 5, min = 1, step = 1),
br(),
),
mainPanel(
"Once you upload your data on the left, the first several rows of the data will show up as a table. Check to make sure that you've uploaded the correct table and that the variables are categorized correctly. Once it looks good, move on to the 'Plot the data' section",
tableOutput("head"),
h3(verbatimTextOutput("var.check"))
)
)
),
tabPanel("Plot the data",
sidebarLayout( # give us a nice data selection side bar!
sidebarPanel(
h4("Plot a Kaplan-Meier Curve"),
selectInput("latency",  "Choose a latency value to plot", choices = NULL),
selectInput("event",  "Choose the event column", choices = NULL),
selectInput("Sex",  "Choose the grouping (i.e., treatment) variable", choices = NULL),
br(),
downloadButton("export", label = "Download a report")
),
mainPanel(
plotOutput("KM")
)
))
))
# Define server logic required to draw a K-M plot
server <- function(input, output, session){
values <- reactiveValues()
data <- reactive({
req(input$upload)
ext <- tools::file_ext(input$upload$name)
switch(ext,
csv = vroom::vroom(input$upload$datapath, delim = ","),
tsv = vroom::vroom(input$upload$datapath, delim = "\t"),
validate("Invalid file; Please upload a .csv or .tsv file")
)
})
#this updates the drop-down menu for selecting variables to plot given the data by taking the column names of the dataframe.
observeEvent(data(),{
choices=names(data())
updateSelectInput(session, "latency", choices=choices)
updateSelectInput(session, "event", choices=choices)
updateSelectInput(session, "Sex", choices=choices)
})
output$head <-   renderTable({
head(data(), input$n)
})
#
output$var.check <- renderPrint({
sapply(as.data.frame(data()), class)
})
# ##get data ready to plot
dataSelection <- reactive({
dat <- data()
chosen.data <- dat %>% select(input$latency, input$event, input$Sex)
return(chosen.data)
})
sf <- reactive({
chosen.data <-chosen.data()
sf <- survfit(Surv(latency, event)~Sex, data=chosen.data)
return(sf)
})
plotit = reactive({
require(ggplot2)
require(survival)
chosen.data <- dataSelection()
sf <- sf
values$p <-  plot(sf, col=c("red", "blue"), las=1, xlab = "time(minutes)", ylab = "proportion not learned")
values$p
})
#
output$KM = renderPlot({
print(plotit())
})
#
output$export <- downloadHandler(
filename <- function(){
paste("plot_", strftime(Sys.time(), format = "%Y-%m-%d_%H-%M-%S"), ".pdf", sep = "")},
content = function(file){
pdf(file, onefile = T)
print(values$p)
dev.off()
}
#        contentType = 'image/pdf'
)
}
# Run the application
shinyApp(ui = ui, server = server)
dat=file.choose()
libarary(survival)
library(survival)
head(dat)
dat=read.csv(file.choose())
head(agt)
head(dat)
sf=survfit(Surv(Latency_from_Jan1, event)~Sex, data=dat)
plot(sf)
dat$Sex
sf=survfit(Surv(Latency_from_Jan1, event)~Sex, data=dat%>%filter(Sex!=""))
plot(sf)
plot(sf, col=("red","blue"))
plot(sf, col=c("red","blue"))
legend(col=levels(dat$Sex))
legend("lowerleft",col=levels(dat$Sex))
legend("lowerleft",legend=levels(dat$Sex))
legend("lowerleft",legend=c(levels(dat$Sex)))
levels(dat$Sex)
dat$Sex
levels(dat$Sex)
legend("lowerleft",legend=c("Female", "Male"))
legend("bottomleft",legend=c("Female", "Male"))
legend("bottomleft",legend=c("Female", "Male"), col=c("red", "blue"))
dat=read.csv(file.choose())
library(survival)
sf=survfit(Surv(Latency_from_Jan1, event)~Sex, data=dat)
plot(sf, col=c("black","red","blue"))
legend("bottomleft",legend=c("Unknown","Female", "Male"), col=c("black", "red", "blue"))
dat=read.csv(file.choose())
library(survival)
sf=survfit(Surv(Latency_from_Jan1, event)~Sex, data=dat)
plot(sf, col=c("black","red","blue"))
legend("bottomleft",legend=c("Unknown","Female", "Male"), col=c("black", "red", "blue"))
sf=survfit(Surv(latench_use, event)~Sex, data=dat)
plot(sf, col=c("black","red","blue"))
legend("bottomleft",legend=c("Unknown","Female", "Male"), col=c("black", "red", "blue"))
sf=survfit(Surv(latency_use, event)~Sex, data=dat)
plot(sf, col=c("black","red","blue"))
legend("bottomleft",legend=c("Unknown","Female", "Male"), col=c("black", "red", "blue"))
legend("bottomleft",legend=c("Unknown","Female", "Male"), col=c("black", "red", "blue"), lty=1)
?coxph
coxph(sf)
coxph(Surv(latency_use, event)~Sex, data=dat)
mod=coxph(Surv(latency_use, event)~Sex, data=dat)
summary(mod)
mod=coxph(Surv(latency_use, event)~Sex, data=dat%>%filter(Sex!="Unknown"))
summary(mod)
anova(mod)
sf=survfit(Surv(latency_use, event)~Sex, data=dat%>%filter(Sex!="Unknown"))
plot(sf, col=c("red","blue"))
legend("bottomleft",legend=c("Female", "Male"), col=c("red", "blue"), lty=1)
mod=coxph(Surv(latency_use, event)~Sex, data=dat%>%filter(Sex!="Unknown"))
anova(mod)
levels(dat$Sex)=c("Female", "Male", "Unknown")
sf=survfit(Surv(latency_use, event)~Sex, data=dat%>%filter(Sex!="Unknown"))
plot(sf, col=c("red","blue"))
legend("bottomleft",legend=c("Female", "Male"), col=c("red", "blue"), lty=1)
mod=coxph(Surv(latency_use, event)~Sex, data=dat%>%filter(Sex!="Unknown"))
dat
levels(dat$Sex)=c("F", "M", "Unknown")
sf=survfit(Surv(latency_use, event)~Sex, data=dat%>%filter(Sex!="Unknown"))
plot(sf, col=c("red","blue"))
legend("bottomleft",legend=c("Female", "Male"), col=c("red", "blue"), lty=1)
sf=survfit(Surv(latency_use, event)~Sex)
plot(sf, col=c("red","blue"))
legend("bottomleft",legend=c("Female", "Male"), col=c("red", "blue"), lty=1)
sf=survfit(Surv(latency_use, event)~Sex, data=dat)
class(dat$Sex)
dat$Sex=factor(dat$Sex)
dat$Sex
dat$Sex=factor(dat$Sex)
sf=survfit(Surv(latency_use, event)~Sex, data=dat)
plot(sf, col=c("red","blue", "unknown"))
legend("bottomleft",legend=c(levels(dat$Sex)), col=c("red", "blue", "black"), lty=1)
plot(sf, col=c("red","blue", "black"))
legend("bottomleft",legend=c(levels(dat$Sex)), col=c("red", "blue", "black"), lty=1)
mod=coxph(Surv(latency_use, event)~Sex, data=dat%>%filter(Sex!="Unknown"))
dat$Sex=factor(dat$Sex)
sf=survfit(Surv(latency_use, event)~Sex, data=dat)
plot(sf, col=c("red","blue", "black"))
legend("bottomleft",legend=c(levels(dat$Sex)), col=c("red", "blue", "black"), lty=1)
